import { chromium } from 'playwright';

console.log('üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ü–†–û–ö–°–ò (–ë–ï–ó WEBSHARE API)\n');

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
const testProxies = [
  { host: '8.222.128.173', port: 3129, username: '', password: '', country: 'üá∏üá¨' },
  { host: '185.199.84.161', port: 53281, username: '', password: '', country: 'üá∑üá∫' },
  { host: '103.152.112.162', port: 80, username: '', password: '', country: 'üáÆüá©' }
];

const testDirectConnection = async () => {
  console.log('üè† –¢–µ—Å—Ç–∏—Ä—É–µ–º –ü–†–Ø–ú–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
  
  let browser = null;
  let page = null;
  
  try {
    browser = await chromium.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    page = await browser.newPage();
    page.setDefaultTimeout(10000);
    
    await page.goto('https://httpbin.org/ip', { waitUntil: 'domcontentloaded' });
    
    const content = await page.textContent('pre');
    const ipData = JSON.parse(content);
    
    console.log(`‚úÖ –ü—Ä—è–º–æ–π IP: ${ipData.origin}`);
    return { success: true, ip: ipData.origin };
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return { success: false, error: error.message };
  } finally {
    if (page) await page.close().catch(() => {});
    if (browser) await browser.close().catch(() => {});
  }
};

const testProxyConnection = async (proxy) => {
  console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: ${proxy.country} ${proxy.host}:${proxy.port}`);
  
  let browser = null;
  let page = null;
  
  try {
    const proxyConfig = {
      server: `http://${proxy.host}:${proxy.port}`
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å username/password
    if (proxy.username && proxy.password) {
      proxyConfig.username = proxy.username;
      proxyConfig.password = proxy.password;
    }
    
    browser = await chromium.launch({
      headless: true,
      proxy: proxyConfig,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    page = await browser.newPage();
    page.setDefaultTimeout(15000);
    
    console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ httpbin.org —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...`);
    await page.goto('https://httpbin.org/ip', { waitUntil: 'domcontentloaded' });
    
    const content = await page.textContent('pre');
    const ipData = JSON.parse(content);
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ! IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${ipData.origin}`);
    return { success: true, ip: ipData.origin };
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: ${error.message}`);
    return { success: false, error: error.message };
  } finally {
    if (page) await page.close().catch(() => {});
    if (browser) await browser.close().catch(() => {});
  }
};

const main = async () => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const directResult = await testDirectConnection();
    const directIP = directResult.success ? directResult.ip : 'unknown';
    
    console.log(`\nüìç –í–∞—à –ø—Ä—è–º–æ–π IP: ${directIP}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:');
    
    let workingProxies = 0;
    const uniqueIPs = new Set([directIP]);
    
    for (const proxy of testProxies) {
      const result = await testProxyConnection(proxy);
      
      if (result.success) {
        workingProxies++;
        uniqueIPs.add(result.ip);
        
        if (result.ip !== directIP) {
          console.log(`üéâ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! IP –∏–∑–º–µ–Ω–∏–ª—Å—è: ${directIP} ‚Üí ${result.ip}`);
        } else {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ IP –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è`);
        }
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    // –ò—Ç–æ–≥–∏
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: ${workingProxies} –∏–∑ ${testProxies.length}`);
    console.log(`üåê –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP: ${uniqueIPs.size}`);
    console.log(`üìç –í—Å–µ IP: ${Array.from(uniqueIPs).join(', ')}`);
    
    if (workingProxies > 0) {
      console.log('\nüéâ Playwright –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–æ–∫—Å–∏!');
    } else {
      console.log('\n‚ö†Ô∏è –ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
      console.log('üí° –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }
};

main().catch(console.error); 