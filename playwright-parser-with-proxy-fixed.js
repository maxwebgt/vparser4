import { chromium } from 'playwright';
import ProxyHandler from './modules/proxyHandler.js';

console.log('üõí –ü–ê–†–°–ï–† –ù–ê–õ–ò–ß–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô –ü–†–û–ö–°–ò\n');

const parseProductAvailability = async (targetUrl = null) => {
  const productUrl = targetUrl || 'https://www.vseinstrumenti.ru/product/vibratsionnyj-nasos-sibrteh-svn300-15-kabel-15-m-99302-1338303/';
  
  console.log(`üéØ –¶–µ–ª–µ–≤–æ–π URL: ${productUrl}\n`);
  
  const proxyHandler = new ProxyHandler();
  await proxyHandler.fetchProxies();
  
  const maxAttempts = 10; // –£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  let currentProxy = null;
  let usedProxy = false;
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    console.log(`\nüîÑ [–ü–û–ü–´–¢–ö–ê ${attempt}/${maxAttempts}] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫—É...`);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞—â–∏—Ç—ã –∏ –Ω–µ—Ç –ø—Ä–æ–∫—Å–∏ - –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
    if (proxyHandler.stats.protectionHits >= 3 && !currentProxy) {
      console.log('üîí [PROXY] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ - –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏...');
      currentProxy = proxyHandler.getNextProxy();
      if (!currentProxy) {
        console.log('‚ùå [ERROR] –í—Å–µ –ø—Ä–æ–∫—Å–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
        break;
      }
      usedProxy = true;
    }
    
    const result = await attemptParsing(attempt, currentProxy, productUrl, proxyHandler);
    
    if (result.success) {
      if (usedProxy && currentProxy) {
        proxyHandler.markProxySuccess(currentProxy);
      }
      console.log('\n‚úÖ –ü–ê–†–°–ò–ù–ì –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
      return result.data;
    }
    
    if (result.needNewProxy) {
      if (currentProxy) {
        proxyHandler.markProxyFailed(currentProxy, 'HTTP_403');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
      currentProxy = proxyHandler.getNextProxy();
      if (!currentProxy) {
        console.log('‚ùå [ERROR] –í—Å–µ –ø—Ä–æ–∫—Å–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
        break;
      }
      usedProxy = true;
    }
    
    // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    const delay = attempt * 1000 + Math.random() * 2000; // 1-3 —Å–µ–∫—É–Ω–¥—ã
    console.log(`‚è≥ –ü–∞—É–∑–∞ ${Math.round(delay/1000)}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
    await new Promise(resolve => setTimeout(resolve, delay));
  }
  
  console.log('\n‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
  proxyHandler.printStats();
  return null;
};

const attemptParsing = async (attempt, proxy, productUrl, proxyHandler) => {
  let browser = null;
  let page = null;
  
  try {
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
    const launchOptions = {
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-blink-features=AutomationControlled',
        '--exclude-switch=enable-automation',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--no-first-run',
        '--no-default-browser-check',
        '--disable-default-apps',
        '--disable-extensions',
        '--disable-background-timer-throttling',
        '--disable-renderer-backgrounding',
        '--disable-backgrounding-occluded-windows',
        '--disable-client-side-phishing-detection',
        '--disable-hang-monitor',
        '--disable-prompt-on-repost',
        '--disable-sync'
      ]
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (proxy) {
      launchOptions.proxy = {
        server: `http://${proxy.host}:${proxy.port}`,
        username: proxy.username,
        password: proxy.password
      };
      console.log(`üåê [PROXY] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: ${proxy.country} ${proxy.host}:${proxy.port}`);
    } else {
      console.log('üè† [DIRECT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    browser = await chromium.launch(launchOptions);
    const context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36',
      viewport: { width: 1920, height: 1080 },
      locale: 'ru-RU',
      timezoneId: 'Europe/Moscow',
      extraHTTPHeaders: {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Cache-Control': 'max-age=0',
        'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="136", "Google Chrome";v="136"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
      }
    });
    
    page = await context.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
    page.setDefaultTimeout(45000); // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
    
    // –ú–∞—Å–∫–∏—Ä—É–µ–º webdriver
    await page.addInitScript(() => {
      Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
      delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array;
      delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise;
      delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol;
    });
    
    // üöÄ [–ù–ê–í–ò–ì–ê–¶–ò–Ø] –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç—Ä–µ—Ö—ç—Ç–∞–ø–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if (productUrl.includes('vseinstrumenti.ru')) {
      console.log('üöÄ [NAVIGATION] –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ç—Ä–µ—Ö—ç—Ç–∞–ø–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é...');
      
      // –≠—Ç–∞–ø 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      console.log('üè† [STAGE 1/3] –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      try {
        const homeResponse = await page.goto('https://www.vseinstrumenti.ru/', { 
          waitUntil: 'domcontentloaded',
          timeout: 45000
        });
        
        const homeStatus = homeResponse.status();
        console.log(`‚úÖ [STAGE 1/3] –ì–ª–∞–≤–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: ${homeStatus}`);
        
        if (homeStatus === 403) {
          console.log('üö´ [PROTECTION] HTTP 403 –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
          const needProxy = proxyHandler.registerProtectionHit();
          if (needProxy || proxy) {
            return { success: false, needNewProxy: true };
          }
        }
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        await page.waitForTimeout(2000 + Math.random() * 2000);
        
      } catch (error) {
        console.log(`‚ùå [STAGE 1/3] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π: ${error.message}`);
        if (error.message.includes('403') || error.message.includes('net::ERR_')) {
          return { success: false, needNewProxy: true };
        }
        return { success: false, needNewProxy: false };
      }
      
      // –≠—Ç–∞–ø 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞
      console.log('üèôÔ∏è [STAGE 2/3] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥...');
      try {
        const cityResponse = await page.goto('https://www.vseinstrumenti.ru/represent/change/?represent_id=1', { 
          waitUntil: 'domcontentloaded',
          timeout: 45000
        });
        
        console.log(`‚úÖ [STAGE 2/3] –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${cityResponse.status()}`);
        await page.waitForTimeout(1000 + Math.random() * 1000);
        
      } catch (error) {
        console.log(`‚ö†Ô∏è [STAGE 2/3] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞: ${error.message}`);
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
      
      // –≠—Ç–∞–ø 3: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ–≤–∞—Ä—É
      await page.waitForTimeout(1000 + Math.random() * 1000);
      console.log('üõí [STAGE 3/3] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–æ–≤–∞—Ä—É...');
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–æ–≤–∞—Ä—É
    try {
      const productResponse = await page.goto(productUrl, { 
        waitUntil: 'domcontentloaded',
        timeout: 45000
      });
      
      const productStatus = productResponse.status();
      console.log(`‚úÖ [PRODUCT] –¢–æ–≤–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${productStatus}`);
      
      if (productStatus === 403) {
        console.log('üö´ [PROTECTION] HTTP 403 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞');
        const needProxy = proxyHandler.registerProtectionHit();
        if (needProxy || proxy) {
          return { success: false, needNewProxy: true };
        }
      }
      
      if (productStatus === 404) {
        console.log('üì≠ [INFO] HTTP 404 - —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        // 404 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π –∑–∞—â–∏—Ç—ã, –Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
        return { success: false, needNewProxy: false };
      }
      
    } catch (error) {
      console.log(`‚ùå [PRODUCT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞: ${error.message}`);
      if (error.message.includes('403') || error.message.includes('net::ERR_')) {
        return { success: false, needNewProxy: true };
      }
      return { success: false, needNewProxy: false };
    }
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await page.waitForTimeout(3000 + Math.random() * 2000);
    
    // üîç [PARSING] –ü–∞—Ä—Å–∏–º –Ω–∞–ª–∏—á–∏–µ
    console.log('\nüîç –ü–ê–†–°–ò–ù–ì –ù–ê–õ–ò–ß–ò–Ø...');
    
    const availabilityData = await page.evaluate(() => {
      const data = {};
      
      // 1. –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í –∫–æ—Ä–∑–∏–Ω—É"
      let addToCartBtn = document.querySelector('[data-qa="product-add-to-cart-button"]') ||
                         document.querySelector('button[title="–í –∫–æ—Ä–∑–∏–Ω—É"]') ||
                         document.querySelector('.add-to-cart') ||
                         document.querySelector('.OnnEZB button');
      
      if (!addToCartBtn) {
        const allButtons = document.querySelectorAll('button');
        for (const btn of allButtons) {
          const btnText = btn.textContent.toLowerCase().trim();
          if (btnText.includes('–≤ –∫–æ—Ä–∑–∏–Ω—É') || btnText.includes('–∫—É–ø–∏—Ç—å')) {
            addToCartBtn = btn;
            break;
          }
        }
      }
      
      data.addToCartBtnFound = !!addToCartBtn;
      
      if (addToCartBtn) {
        data.btnDisabled = addToCartBtn.disabled;
        data.btnHasDisabledClass = addToCartBtn.classList.contains('disabled');
        data.btnText = addToCartBtn.textContent.trim();
        
        if (!addToCartBtn.disabled && !addToCartBtn.classList.contains('disabled')) {
          data.availability = 'in_stock';
          data.quantity = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        } else {
          data.availability = 'out_of_stock';
          data.quantity = 0;
        }
      } else {
        data.availability = 'unknown';
        data.quantity = 0;
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      data.title = document.title;
      data.hasContent = document.body.innerHTML.length > 1000;
      
      return data;
    });
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüì¶ === –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê ===');
    console.log(`üéØ –°–¢–ê–¢–£–°: ${availabilityData.availability}`);
    console.log(`üìä –ö–û–õ–ò–ß–ï–°–¢–í–û: ${availabilityData.quantity} —à—Ç`);
    console.log(`üìÑ –ó–ê–ì–û–õ–û–í–û–ö: ${availabilityData.title?.substring(0, 50)}...`);
    console.log('\nüîß –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
    console.log(`   –ö–Ω–æ–ø–∫–∞ "–í –∫–æ—Ä–∑–∏–Ω—É" –Ω–∞–π–¥–µ–Ω–∞: ${availabilityData.addToCartBtnFound ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${availabilityData.hasContent ? '‚úÖ' : '‚ùå'}`);
    if (availabilityData.addToCartBtnFound) {
      console.log(`   –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: "${availabilityData.btnText}"`);
      console.log(`   –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${availabilityData.btnDisabled ? '‚ùå' : '‚úÖ'}`);
    }
    console.log('=======================================');
    
    await browser.close();
    
    return {
      success: true,
      needNewProxy: false,
      data: availabilityData
    };
    
  } catch (error) {
    console.log(`‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
    
    if (browser) {
      try {
        await browser.close();
      } catch (e) {}
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    if (error.message.includes('403') || 
        error.message.includes('net::ERR_PROXY') ||
        error.message.includes('net::ERR_TUNNEL_CONNECTION_FAILED')) {
      return { success: false, needNewProxy: true };
    }
    
    return { success: false, needNewProxy: false };
  }
};

const main = async () => {
  try {
    const result = await parseProductAvailability();
    
    if (result) {
      console.log('\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    } else {
      console.log('\n‚ùå –ü–ê–†–°–ò–ù–ì –ù–ï –£–î–ê–õ–°–Ø');
    }
  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }
};

// –ó–∞–ø—É—Å–∫
await main(); 