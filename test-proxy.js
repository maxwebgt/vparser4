import { chromium } from 'playwright';
import ProxyHandler from './modules/proxyHandler.js';

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ö–°–ò –ù–ê HTTPBIN.ORG\n');

const testProxy = async (proxy) => {
  console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: ${proxy.country} ${proxy.host}:${proxy.port}`);
  
  let browser = null;
  let page = null;
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ–∫—Å–∏
    browser = await chromium.launch({
      headless: true,
      proxy: {
        server: `http://${proxy.host}:${proxy.port}`,
        username: proxy.username,
        password: proxy.password
      },
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu'
      ]
    });
    
    page = await browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    page.setDefaultTimeout(15000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ httpbin.org
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ httpbin.org/ip...');
    await page.goto('https://httpbin.org/ip', { waitUntil: 'domcontentloaded' });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP
    const content = await page.textContent('pre');
    const ipData = JSON.parse(content);
    const currentIP = ipData.origin;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ! –¢–µ–∫—É—â–∏–π IP: ${currentIP}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º user-agent
    await page.goto('https://httpbin.org/user-agent', { waitUntil: 'domcontentloaded' });
    const uaContent = await page.textContent('pre');
    const uaData = JSON.parse(uaContent);
    
    console.log(`üîç User-Agent: ${uaData['user-agent']}`);
    
    return { success: true, ip: currentIP };
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return { success: false, error: error.message };
  } finally {
    if (page) await page.close().catch(() => {});
    if (browser) await browser.close().catch(() => {});
  }
};

const testWithoutProxy = async () => {
  console.log('\nüè† –¢–µ—Å—Ç–∏—Ä—É–µ–º –ë–ï–ó –ø—Ä–æ–∫—Å–∏ (–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)');
  
  let browser = null;
  let page = null;
  
  try {
    browser = await chromium.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu'
      ]
    });
    
    page = await browser.newPage();
    page.setDefaultTimeout(15000);
    
    await page.goto('https://httpbin.org/ip', { waitUntil: 'domcontentloaded' });
    
    const content = await page.textContent('pre');
    const ipData = JSON.parse(content);
    const currentIP = ipData.origin;
    
    console.log(`‚úÖ –ü—Ä—è–º–æ–π IP: ${currentIP}`);
    
    return { success: true, ip: currentIP };
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return { success: false, error: error.message };
  } finally {
    if (page) await page.close().catch(() => {});
    if (browser) await browser.close().catch(() => {});
  }
};

const main = async () => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const directResult = await testWithoutProxy();
    const directIP = directResult.success ? directResult.ip : 'unknown';
    
    // –°–æ–∑–¥–∞–µ–º proxy handler
    const proxyHandler = new ProxyHandler();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏
    console.log('\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ WebShare.io...');
    const proxiesLoaded = await proxyHandler.fetchProxies();
    
    if (!proxiesLoaded) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç.');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏
    const maxTests = Math.min(5, proxyHandler.proxyList.length);
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${maxTests} –ø—Ä–æ–∫—Å–∏ –∏–∑ ${proxyHandler.proxyList.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:`);
    
    let workingProxies = 0;
    const testedIPs = new Set();
    testedIPs.add(directIP);
    
    for (let i = 0; i < maxTests; i++) {
      const proxy = proxyHandler.getNextProxy();
      if (!proxy) {
        console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        break;
      }
      
      const result = await testProxy(proxy);
      
      if (result.success) {
        proxyHandler.markProxySuccess(proxy);
        workingProxies++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (result.ip !== directIP) {
          console.log(`üéâ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! IP –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${directIP} –Ω–∞ ${result.ip}`);
        } else {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ IP –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (${result.ip})`);
        }
        
        testedIPs.add(result.ip);
      } else {
        proxyHandler.markProxyFailed(proxy, result.error);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    proxyHandler.printStats();
    
    console.log(`\nüåê –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP: ${testedIPs.size}`);
    console.log(`üìç IP –∞–¥—Ä–µ—Å–∞: ${Array.from(testedIPs).join(', ')}`);
    
    if (workingProxies > 0) {
      console.log(`\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! ${workingProxies} –∏–∑ ${maxTests} –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç`);
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω! –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
main().catch(console.error); 