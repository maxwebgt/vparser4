import { chromium } from 'playwright';

console.log('üõí –≠–§–§–ï–ö–¢–ò–í–ù–´–ô –ü–ê–†–°–ï–† –ù–ê–õ–ò–ß–ò–Ø: Playwright –≤–µ—Ä—Å–∏—è —Å –†–ê–ë–û–ß–ò–ú–ò –ü–†–û–ö–°–ò\n');

// üåê –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
let botProtectionHits = 0;
let currentProxyIndex = -1; // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏
let proxyFailures = new Map(); // –°—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
let proxyList = []; // –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ WebShare API

console.log(`‚ÑπÔ∏è [INFO] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ —Ö–µ–Ω–¥–ª–µ—Ä...`);

// –†–ï–ê–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ WebShare API
const fetchProxies = async () => {
  const WEBSHARE_API_KEY = 'qf8q4w-s8r6rk-h6y8yd-6kq5k6-6xb9pkf'; // –í–∞—à –∫–ª—é—á –∏–∑ –ª–æ–≥–æ–≤
  
  console.log(`üåê [PROXY] Initializing proxy handler...`);
  console.log(`üåê [PROXY] Fetching proxies from WebShare.io...`);
  console.log(`üåê [PROXY] Using WebShare API key: ${WEBSHARE_API_KEY.substring(0, 4)}...${WEBSHARE_API_KEY.slice(-4)}`);
  
  try {
    const response = await fetch('https://proxy.webshare.io/api/v2/proxy/list/', {
      headers: {
        'Authorization': `Token ${WEBSHARE_API_KEY}`
      }
    });
    
    if (!response.ok) {
      throw new Error(`WebShare API error: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.results && data.results.length > 0) {
      proxyList = data.results.map(proxy => ({
        host: proxy.proxy_address,
        port: proxy.port,
        username: proxy.username,
        password: proxy.password,
        country: getCountryFlag(proxy.country_code)
      }));
      
      console.log(`üåê [PROXY] Successfully fetched ${proxyList.length} valid proxies from Webshare.io`);
      console.log(`PROXY FETCH COMPLETED SUCCESSFULLY: Found ${proxyList.length} valid proxies`);
      console.log(`üåê [PROXY] Successfully initialized proxy handler with ${proxyList.length} proxies`);
      return true;
    } else {
      throw new Error('No proxies returned from WebShare API');
    }
  } catch (error) {
    console.log(`‚ùå [ERROR] Failed to fetch proxies: ${error.message}`);
    console.log(`üîÑ [FALLBACK] Using without proxies...`);
    return false;
  }
};

const getCountryFlag = (countryCode) => {
  const flags = {
    'US': 'üá∫üá∏', 'GB': 'üá¨üáß', 'DE': 'üá©üá™', 'FR': 'üá´üá∑', 'JP': 'üáØüáµ',
    'CA': 'üá®üá¶', 'AU': 'üá¶üá∫', 'NL': 'üá≥üá±', 'SE': 'üá∏üá™', 'NO': 'üá≥üá¥'
  };
  return flags[countryCode] || 'üåç';
};

const getNextProxy = () => {
  if (proxyList.length === 0) {
    console.log('‚ùå [ERROR] üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!');
    return null;
  }
  
  console.log('üîç [DEBUG] Getting next working proxy (random selection)');
  
  // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏ –≤–º–µ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ
  const availableProxies = proxyList.filter((proxy, index) => {
    const proxyKey = `${proxy.host}:${proxy.port}`;
    const failures = proxyFailures.get(proxyKey) || 0;
    return failures < 3; // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å 3+ –Ω–µ—É–¥–∞—á–∞–º–∏
  });
  
  if (availableProxies.length === 0) {
    console.log('‚ùå [ERROR] üö´ –í—Å–µ –ø—Ä–æ–∫—Å–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!');
    return null;
  }
  
  const randomIndex = Math.floor(Math.random() * availableProxies.length);
  const proxy = availableProxies[randomIndex];
  
  console.log(`üåê [PROXY] üé≤ Randomly selected proxy: ${proxy.country} ${proxy.host}:${proxy.port} with auth ${proxy.username}:*** (${availableProxies.length} available)`);
  console.log(`üåê [PROXY] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: ${proxy.country} ${proxy.host}:${proxy.port}`);
  
  return proxy;
};

const markProxyFailed = (proxy, reason) => {
  if (!proxy) return;
  
  const proxyKey = `${proxy.host}:${proxy.port}`;
  const failures = (proxyFailures.get(proxyKey) || 0) + 1;
  proxyFailures.set(proxyKey, failures);
  
  console.log(`üåê [PROXY] Marked proxy ${proxy.country} ${proxy.host}:${proxy.port} as failed (reason: ${reason}, fails: ${failures})`);
  console.log(`üåê [PROXY] üî¥ Proxy ${proxy.country} ${proxy.host}:${proxy.port} now has total uses: 1 (0 success/${failures} fail) | Rate: 0.0%`);
};

const checkBotProtection = (status) => {
  if (status === 403) {
    botProtectionHits++;
    console.log(`üåê [PROXY] Bot protection detected. Total hits: ${botProtectionHits}`);
    console.log(`üåê [PROXY] üîí –ó–∞—â–∏—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. Total hits: ${botProtectionHits}, Should use proxy: ${botProtectionHits >= 3}`);
    
    return botProtectionHits >= 3;
  }
  return false;
};

const parseProductAvailability = async () => {
  // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
  await fetchProxies();
  
  const maxAttempts = 10; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–∫—Å–∏
  let currentProxy = null;
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    console.log(`‚ÑπÔ∏è [INFO] üîÑ [ATTEMPT ${attempt}/${maxAttempts}] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫—É...`);
    
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏, –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    if (botProtectionHits >= 3 && !currentProxy) {
      console.log(`üåê [PROXY] üåê –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏...`);
      currentProxy = getNextProxy();
      if (!currentProxy) {
        console.log('‚ùå [ERROR] ‚ùå –í—Å–µ –ø—Ä–æ–∫—Å–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.');
        return;
      }
      console.log(`üîç [DEBUG] üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–∫—Å–∏: http://${currentProxy.host}:${currentProxy.port}`);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏
      botProtectionHits = 0;
    }
    
    const result = await attemptParsing(attempt, currentProxy);
    
    if (result.success) {
      return;
    }
    
    if (result.needNewProxy) {
      // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π
      if (currentProxy) {
        markProxyFailed(currentProxy, 'HTTP_403_MULTIPLE');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
      console.log(`üåê [PROXY] üåê –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏...`);
      currentProxy = getNextProxy();
      if (!currentProxy) {
        console.log('‚ùå [ERROR] ‚ùå –í—Å–µ –ø—Ä–æ–∫—Å–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.');
        return;
      }
      console.log(`üîç [DEBUG] üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–∫—Å–∏: http://${currentProxy.host}:${currentProxy.port}`);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏
      botProtectionHits = 0;
    }
    
    if (attempt === maxAttempts) {
      console.log('‚ùå [ERROR] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.');
      console.log('‚ÑπÔ∏è [INFO] ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PROXY & REQUEST STATISTICS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
      console.log('‚ÑπÔ∏è [INFO] ‚îÇ Timestamp: ' + new Date().toISOString() + '                 ‚îÇ');
      console.log('‚ÑπÔ∏è [INFO] ‚îÇ Total Requests: 0                                   ‚îÇ');
      console.log(`‚ÑπÔ∏è [INFO] ‚îÇ Bot Protection Hits: ${botProtectionHits}                               ‚îÇ`);
      console.log('‚ÑπÔ∏è [INFO] ‚îÇ Proxy Requests: 0                                  ‚îÇ');
      console.log('‚ÑπÔ∏è [INFO] ‚îÇ Proxy Successes: 0                                 ‚îÇ');
      console.log('‚ÑπÔ∏è [INFO] ‚îÇ Proxy Failures: 0                                  ‚îÇ');
      console.log('‚ÑπÔ∏è [INFO] ‚îÇ Proxy Success Rate: N/A                             ‚îÇ');
      console.log(`‚ÑπÔ∏è [INFO] ‚îÇ Available Proxies: ${proxyList.length}                             ‚îÇ`);
      console.log('‚ÑπÔ∏è [INFO] ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
      return;
    }
  }
};

const attemptParsing = async (attempt, proxy = null) => {
  let launchOptions = { 
    headless: true,
    dumpio: true, // üìä –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-gpu'
    ]
  };

  // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (proxy) {
    launchOptions.proxy = {
      server: `http://${proxy.host}:${proxy.port}`,
      username: proxy.username,
      password: proxy.password
    };
  }

  const browser = await chromium.launch(launchOptions);
  
  const context = await browser.newContext({
    // üîß [USER-AGENT] –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π User-Agent
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36',
    
    // üñ•Ô∏è [VIEWPORT] –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π viewport
    viewport: { width: 1920, height: 1080 },
    
    // üìã [HEADERS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    extraHTTPHeaders: {
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
      'Accept-Encoding': 'gzip, deflate, br',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'Sec-Ch-Ua': '"Chromium";v="136", "Not_A Brand";v="24", "Google Chrome";v="136"',
      'Sec-Ch-Ua-Mobile': '?0',
      'Sec-Ch-Ua-Platform': '"Windows"',
      'Sec-Fetch-Dest': 'document',
      'Sec-Fetch-Mode': 'navigate',
      'Sec-Fetch-Site': 'none',
      'Sec-Fetch-User': '?1',
      'Upgrade-Insecure-Requests': '1',
      'DNT': '1'
    }
  });
  
  const page = await context.newPage();
  
  // üìä [–õ–û–ì–ò–†–û–í–ê–ù–ò–ï] –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  page.on('request', request => {
    console.log(`üîç [DEBUG] üì§ [OUT-${request.url().slice(-1)}] ${request.method()} ${request.url().substring(0, 80)}...`);
  });
  
  page.on('response', response => {
    console.log(`üîç [DEBUG] üì• [IN-${response.url().slice(-1)}] ${response.status()} ${response.url().substring(0, 80)}...`);
  });
  
  // üé≠ [–ê–ù–¢–ò-–î–ï–¢–ï–ö–¶–ò–Ø] –ü–û–õ–ù–ê–Ø –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –ê–ù–¢–ò-–î–ï–¢–ï–ö–¶–ò–Ø
  await page.addInitScript(() => {
    Object.defineProperty(navigator, 'platform', { get: () => 'Win32', configurable: true });
    Object.defineProperty(screen, 'width', { get: () => 1920, configurable: true });
    Object.defineProperty(screen, 'height', { get: () => 1080, configurable: true });
    Object.defineProperty(screen, 'availWidth', { get: () => 1920, configurable: true });
    Object.defineProperty(screen, 'availHeight', { get: () => 1040, configurable: true });
    Object.defineProperty(screen, 'colorDepth', { get: () => 24, configurable: true });
    Object.defineProperty(screen, 'pixelDepth', { get: () => 24, configurable: true });
    
    Object.defineProperty(navigator, 'webdriver', { get: () => false, configurable: true });
    delete navigator.__proto__.webdriver;
    
    Object.defineProperty(navigator, 'language', { get: () => 'ru-RU', configurable: true });
    Object.defineProperty(navigator, 'languages', { get: () => ['ru-RU', 'ru', 'en-US', 'en'], configurable: true });
    
    window.navigator.webdriver = false;
    delete window.navigator.webdriver;
    
    if (document.documentElement) {
      document.documentElement.removeAttribute('webdriver');
    }
  });
  
  const productUrl = 'https://www.vseinstrumenti.ru/product/vibratsionnyj-nasos-sibrteh-svn300-15-kabel-15-m-99302-1338303/';
  
  // üè† [STAGE 1/3] –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
  console.log('‚ÑπÔ∏è [INFO] üè† [STAGE 1/3] –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
  
  const initialDelay = Math.floor(Math.random() * 5000) + 1000;
  console.log(`üîç [DEBUG] ‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ ${initialDelay}ms –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º...`);
  await new Promise(resolve => setTimeout(resolve, initialDelay));
  
  try {
    const homeResponse = await page.goto('https://www.vseinstrumenti.ru/', { 
      waitUntil: 'domcontentloaded',
      timeout: 5000
    });
    
    const homeStatus = homeResponse.status();
    console.log(`‚úÖ [STAGE 1/3] –ì–ª–∞–≤–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: ${homeStatus}`);
    
    if (homeStatus === 403) {
      console.log('‚ö†Ô∏è [WARNING] üö´ HTTP 403 –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      const needProxy = checkBotProtection(homeStatus);
      
      if (needProxy) {
        console.log('üîÑ [STAGE 1/3] –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–ø—ã—Ç–∫—É...');
        await browser.close();
        return { success: false, needNewProxy: !proxy }; // –ù—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      } else {
        console.log('üîÑ [STAGE 1/3] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (–ø–æ–ø—ã—Ç–∫–∞ –≤ –Ω–æ—Ä–º–µ)...');
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è [STAGE 1/3] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π: ${error.message}`);
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–π–º–∞—É—Ç, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (error.message.includes('Timeout')) {
      console.log('üîÑ [STAGE 1/3] –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É...');
    }
  }
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–ª–∞–≤–Ω–æ–π
  await new Promise(resolve => setTimeout(resolve, 1500));
  await page.mouse.move(500, 300);
  await new Promise(resolve => setTimeout(resolve, 800));
  
  // üèôÔ∏è [STAGE 2/3] –£–°–¢–ê–ù–û–í–ö–ê –ì–û–†–û–î–ê
  console.log('üèôÔ∏è [STAGE 2/3] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥...');
  
  let citySuccess = false;
  try {
    const cityUrl = 'https://www.vseinstrumenti.ru/represent/change/?represent_id=1';
    const cityResponse = await page.goto(cityUrl, { 
      waitUntil: 'domcontentloaded',
      timeout: 5000
    });
    
    const cityStatus = cityResponse.status();
    console.log(`‚úÖ [STAGE 2/3] –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${cityStatus}`);
    
    if (cityStatus === 403) {
      console.log('‚ö†Ô∏è [WARNING] üö´ HTTP 403 –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥–æ—Ä–æ–¥–∞');
      const needProxy = checkBotProtection(cityStatus);
      
      if (needProxy) {
        console.log('üîÑ [STAGE 2/3] –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–ø—ã—Ç–∫—É...');
        await browser.close();
        return { success: false, needNewProxy: !proxy }; // –ù—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      }
    }
    
    citySuccess = true;
  } catch (cityError) {
    console.log(`‚ö†Ô∏è [STAGE 2/3] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞: ${cityError.message}`);
    console.log('üîÑ [STAGE 2/3] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≥–æ—Ä–æ–¥–∞ –∏ –∏–¥–µ–º –∫ —Ç–æ–≤–∞—Ä—É...');
  }
  
  if (citySuccess) {
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // üõí [STAGE 3/3] –ü–ï–†–ï–•–û–î –ù–ê –¢–û–í–ê–†
  console.log('üõí [STAGE 3/3] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–æ–≤–∞—Ä—É...');
  
  let productSuccess = false;
  try {
    const productResponse = await page.goto(productUrl, { 
      waitUntil: 'domcontentloaded',
      timeout: 5000
    });
    
    const productStatus = productResponse.status();
    console.log(`‚úÖ [STAGE 3/3] –¢–æ–≤–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${productStatus}`);
    
    if (productStatus === 403) {
      console.log('‚ö†Ô∏è [WARNING] üö´ HTTP 403 –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞');
      const needProxy = checkBotProtection(productStatus);
      
      if (needProxy) {
        console.log('üîÑ [STAGE 3/3] –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–ø—ã—Ç–∫—É...');
        await browser.close();
        return { success: false, needNewProxy: !proxy }; // –ù—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      }
    }
    
    productSuccess = true;
  } catch (productError) {
    console.log(`‚ö†Ô∏è [STAGE 3/3] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞: ${productError.message}`);
    
    // –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–£–¢–¨: –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ–≤–∞—Ä—É
    console.log('üéØ [FALLBACK] –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ–≤–∞—Ä—É –±–µ–∑ –ø—Ä–æ–≥—Ä–µ–≤–∞...');
    
    try {
      const directResponse = await page.goto(productUrl, { 
        waitUntil: 'networkidle',
        timeout: 5000
      });
      
      console.log(`‚úÖ [FALLBACK] –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${directResponse.status()}`);
      productSuccess = true;
    } catch (directError) {
      console.log(`‚ùå [FALLBACK] –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${directError.message}`);
      console.log('üîÑ [FALLBACK] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    }
  }
  
  // –ü–ê–†–°–ò–ù–ì –ù–ê–õ–ò–ß–ò–Ø
  console.log('\nüîç –ü–ê–†–°–ò–ù–ì –ù–ê–õ–ò–ß–ò–Ø...\n');
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const availabilityData = await page.evaluate(() => {
    const data = {};
    
    // 1. –ò–©–ï–ú –ö–ù–û–ü–ö–£ "–í –ö–û–†–ó–ò–ù–£"
    let addToCartBtn = document.querySelector('[data-qa="product-add-to-cart-button"]') ||
                       document.querySelector('button[title="–í –∫–æ—Ä–∑–∏–Ω—É"]') ||
                       document.querySelector('.add-to-cart') ||
                       document.querySelector('.OnnEZB button') ||
                       document.querySelector('[class*="add-to-cart"]') ||
                       document.querySelector('[class*="buy-button"]') ||
                       document.querySelector('button[data-qa*="add-to-cart"]') ||
                       document.querySelector('button[data-qa*="buy"]');
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    if (!addToCartBtn) {
      const allButtons = document.querySelectorAll('button');
      for (const btn of allButtons) {
        const btnText = btn.textContent.toLowerCase().trim();
        if (btnText.includes('–≤ –∫–æ—Ä–∑–∏–Ω—É') || 
            btnText.includes('–∫—É–ø–∏—Ç—å') || 
            btnText.includes('–∑–∞–∫–∞–∑–∞—Ç—å') ||
            btnText.includes('–¥–æ–±–∞–≤–∏—Ç—å')) {
          addToCartBtn = btn;
          break;
        }
      }
    }
    
    data.addToCartBtnFound = !!addToCartBtn;
    
    if (addToCartBtn) {
      data.btnDisabled = addToCartBtn.disabled;
      data.btnHasDisabledClass = addToCartBtn.classList.contains('disabled');
      data.btnText = addToCartBtn.textContent.trim();
      
      if (!addToCartBtn.disabled && !addToCartBtn.classList.contains('disabled')) {
        data.availability = 'in_stock';
        
        // 2. –ò–©–ï–ú –¢–û–ß–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û
        const availabilityEl = document.querySelector('[data-qa="availability-info"]');
        if (availabilityEl) {
          const quantityText = availabilityEl.textContent;
          data.availabilityText = quantityText;
          
          // –¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ: "351 —à—Ç"
          let exactMatch = quantityText.match(/(\d+)\s*—à—Ç/);
          if (exactMatch) {
            data.quantity = parseInt(exactMatch[1]);
          } else {
            // –ë–æ–ª—å—à–µ —á–∏—Å–ª–∞: "> 100 —à—Ç", "–±–æ–ª–µ–µ 100 —à—Ç"
            let moreMatch = quantityText.match(/[>–±–æ–ª—å—à–µ|–±–æ–ª–µ–µ]\s*(\d+)\s*—à—Ç/i);
            if (moreMatch) {
              data.quantity = parseInt(moreMatch[1]);
            } else {
              data.quantity = 1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            }
          }
        } else {
          data.quantity = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        // 3. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–ê–í–ö–ï
        const deliveryInfos = [];
        
        // –°–∞–º–æ–≤—ã–≤–æ–∑
        const pickupElement = document.querySelector('[data-qa="product-availability"]');
        if (pickupElement) {
          const pickupText = pickupElement.innerText.trim();
          const pickupMatch = pickupText.match(/–°–∞–º–æ–≤—ã–≤–æ–∑:(.+)/);
          if (pickupMatch) {
            deliveryInfos.push(`–°–∞–º–æ–≤—ã–≤–æ–∑: ${pickupMatch[1].trim()}`);
          }
        }
        
        // –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
        const deliveryLinkElement = document.querySelector('[data-qa="courier-delivery-modal"]');
        if (deliveryLinkElement) {
          let deliveryText = deliveryLinkElement.parentElement.innerText.trim();
          deliveryText = deliveryText.replace(/^–ö—É—Ä—å–µ—Ä–æ–º:\s*/, '');
          deliveryInfos.push(`–ö—É—Ä—å–µ—Ä–æ–º: ${deliveryText}`);
        }
        
        data.deliveryInfo = deliveryInfos;
        
      } else {
        data.availability = 'out_of_stock';
        data.quantity = 0;
      }
    } else {
      data.availability = 'unknown';
      data.quantity = 0;
    }
    
    return data;
  });
  
  // –†–ï–ó–£–õ–¨–¢–ê–¢–´
  console.log('üì¶ === –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê –ù–ê–õ–ò–ß–ò–Ø ===');
  console.log(`üéØ –°–¢–ê–¢–£–°: ${availabilityData.availability}`);
  console.log(`üìä –ö–û–õ–ò–ß–ï–°–¢–í–û: ${availabilityData.quantity} —à—Ç`);
  
  if (availabilityData.availabilityText) {
    console.log(`üí¨ –¢–ï–ö–°–¢ –ù–ê–õ–ò–ß–ò–Ø: "${availabilityData.availabilityText}"`);
  }
  
  if (availabilityData.deliveryInfo && availabilityData.deliveryInfo.length > 0) {
    console.log('üöö –î–û–°–¢–ê–í–ö–ê:');
    availabilityData.deliveryInfo.forEach(info => console.log(`   ${info}`));
  }
  
  console.log('\nüîß –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
  console.log(`   –ö–Ω–æ–ø–∫–∞ "–í –∫–æ—Ä–∑–∏–Ω—É" –Ω–∞–π–¥–µ–Ω–∞: ${availabilityData.addToCartBtnFound ? '‚úÖ' : '‚ùå'}`);
  if (availabilityData.addToCartBtnFound) {
    console.log(`   –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${availabilityData.btnDisabled ? '‚ùå' : '‚úÖ'}`);
    console.log(`   –ï—Å—Ç—å –∫–ª–∞—Å—Å disabled: ${availabilityData.btnHasDisabledClass ? '‚ùå' : '‚úÖ'}`);
    console.log(`   –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: "${availabilityData.btnText}"`);
  }
  
  console.log('=======================================\n');
  
  await browser.close();
  console.log(`‚ÑπÔ∏è [INFO] üîß –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç`);
  
  // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ –±–µ–∑ –æ—à–∏–±–æ–∫ 403, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
  if (availabilityData.availability !== 'unknown') {
    return { success: true, needNewProxy: false };
  }
  
  return { success: false, needNewProxy: false };
};

await parseProductAvailability();

console.log('üèÅ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ª–∏—á–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!'); 